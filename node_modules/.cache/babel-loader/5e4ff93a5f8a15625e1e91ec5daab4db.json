{"ast":null,"code":"(function () {\n  // nb. This is for IE10 and lower _only_.\n  var supportCustomEvent = window.CustomEvent;\n\n  if (!supportCustomEvent || typeof supportCustomEvent === 'object') {\n    supportCustomEvent = function CustomEvent(event, x) {\n      x = x || {};\n      var ev = document.createEvent('CustomEvent');\n      ev.initCustomEvent(event, !!x.bubbles, !!x.cancelable, x.detail || null);\n      return ev;\n    };\n\n    supportCustomEvent.prototype = window.Event.prototype;\n  }\n  /**\n   * @param {Element} el to check for stacking context\n   * @return {boolean} whether this el or its parents creates a stacking context\n   */\n\n\n  function createsStackingContext(el) {\n    while (el && el !== document.body) {\n      var s = window.getComputedStyle(el);\n\n      var invalid = function (k, ok) {\n        return !(s[k] === undefined || s[k] === ok);\n      };\n\n      if (s.opacity < 1 || invalid('zIndex', 'auto') || invalid('transform', 'none') || invalid('mixBlendMode', 'normal') || invalid('filter', 'none') || invalid('perspective', 'none') || s['isolation'] === 'isolate' || s.position === 'fixed' || s.webkitOverflowScrolling === 'touch') {\n        return true;\n      }\n\n      el = el.parentElement;\n    }\n\n    return false;\n  }\n  /**\n   * Finds the nearest <dialog> from the passed element.\n   *\n   * @param {Element} el to search from\n   * @return {HTMLDialogElement} dialog found\n   */\n\n\n  function findNearestDialog(el) {\n    while (el) {\n      if (el.localName === 'dialog') {\n        return (\n          /** @type {HTMLDialogElement} */\n          el\n        );\n      }\n\n      el = el.parentElement;\n    }\n\n    return null;\n  }\n  /**\n   * Blur the specified element, as long as it's not the HTML body element.\n   * This works around an IE9/10 bug - blurring the body causes Windows to\n   * blur the whole application.\n   *\n   * @param {Element} el to blur\n   */\n\n\n  function safeBlur(el) {\n    if (el && el.blur && el !== document.body) {\n      el.blur();\n    }\n  }\n  /**\n   * @param {!NodeList} nodeList to search\n   * @param {Node} node to find\n   * @return {boolean} whether node is inside nodeList\n   */\n\n\n  function inNodeList(nodeList, node) {\n    for (var i = 0; i < nodeList.length; ++i) {\n      if (nodeList[i] === node) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * @param {HTMLFormElement} el to check\n   * @return {boolean} whether this form has method=\"dialog\"\n   */\n\n\n  function isFormMethodDialog(el) {\n    if (!el || !el.hasAttribute('method')) {\n      return false;\n    }\n\n    return el.getAttribute('method').toLowerCase() === 'dialog';\n  }\n  /**\n   * @param {!HTMLDialogElement} dialog to upgrade\n   * @constructor\n   */\n\n\n  function dialogPolyfillInfo(dialog) {\n    this.dialog_ = dialog;\n    this.replacedStyleTop_ = false;\n    this.openAsModal_ = false; // Set a11y role. Browsers that support dialog implicitly know this already.\n\n    if (!dialog.hasAttribute('role')) {\n      dialog.setAttribute('role', 'dialog');\n    }\n\n    dialog.show = this.show.bind(this);\n    dialog.showModal = this.showModal.bind(this);\n    dialog.close = this.close.bind(this);\n\n    if (!('returnValue' in dialog)) {\n      dialog.returnValue = '';\n    }\n\n    if ('MutationObserver' in window) {\n      var mo = new MutationObserver(this.maybeHideModal.bind(this));\n      mo.observe(dialog, {\n        attributes: true,\n        attributeFilter: ['open']\n      });\n    } else {\n      // IE10 and below support. Note that DOMNodeRemoved etc fire _before_ removal. They also\n      // seem to fire even if the element was removed as part of a parent removal. Use the removed\n      // events to force downgrade (useful if removed/immediately added).\n      var removed = false;\n\n      var cb = function () {\n        removed ? this.downgradeModal() : this.maybeHideModal();\n        removed = false;\n      }.bind(this);\n\n      var timeout;\n\n      var delayModel = function (ev) {\n        if (ev.target !== dialog) {\n          return;\n        } // not for a child element\n\n\n        var cand = 'DOMNodeRemoved';\n        removed |= ev.type.substr(0, cand.length) === cand;\n        window.clearTimeout(timeout);\n        timeout = window.setTimeout(cb, 0);\n      };\n\n      ['DOMAttrModified', 'DOMNodeRemoved', 'DOMNodeRemovedFromDocument'].forEach(function (name) {\n        dialog.addEventListener(name, delayModel);\n      });\n    } // Note that the DOM is observed inside DialogManager while any dialog\n    // is being displayed as a modal, to catch modal removal from the DOM.\n\n\n    Object.defineProperty(dialog, 'open', {\n      set: this.setOpen.bind(this),\n      get: dialog.hasAttribute.bind(dialog, 'open')\n    });\n    this.backdrop_ = document.createElement('div');\n    this.backdrop_.className = 'backdrop';\n    this.backdrop_.addEventListener('click', this.backdropClick_.bind(this));\n  }\n\n  dialogPolyfillInfo.prototype = {\n    get dialog() {\n      return this.dialog_;\n    },\n\n    /**\n     * Maybe remove this dialog from the modal top layer. This is called when\n     * a modal dialog may no longer be tenable, e.g., when the dialog is no\n     * longer open or is no longer part of the DOM.\n     */\n    maybeHideModal: function () {\n      if (this.dialog_.hasAttribute('open') && document.body.contains(this.dialog_)) {\n        return;\n      }\n\n      this.downgradeModal();\n    },\n\n    /**\n     * Remove this dialog from the modal top layer, leaving it as a non-modal.\n     */\n    downgradeModal: function () {\n      if (!this.openAsModal_) {\n        return;\n      }\n\n      this.openAsModal_ = false;\n      this.dialog_.style.zIndex = ''; // This won't match the native <dialog> exactly because if the user set top on a centered\n      // polyfill dialog, that top gets thrown away when the dialog is closed. Not sure it's\n      // possible to polyfill this perfectly.\n\n      if (this.replacedStyleTop_) {\n        this.dialog_.style.top = '';\n        this.replacedStyleTop_ = false;\n      } // Clear the backdrop and remove from the manager.\n\n\n      this.backdrop_.parentNode && this.backdrop_.parentNode.removeChild(this.backdrop_);\n      dialogPolyfill.dm.removeDialog(this);\n    },\n\n    /**\n     * @param {boolean} value whether to open or close this dialog\n     */\n    setOpen: function (value) {\n      if (value) {\n        this.dialog_.hasAttribute('open') || this.dialog_.setAttribute('open', '');\n      } else {\n        this.dialog_.removeAttribute('open');\n        this.maybeHideModal(); // nb. redundant with MutationObserver\n      }\n    },\n\n    /**\n     * Handles clicks on the fake .backdrop element, redirecting them as if\n     * they were on the dialog itself.\n     *\n     * @param {!Event} e to redirect\n     */\n    backdropClick_: function (e) {\n      if (!this.dialog_.hasAttribute('tabindex')) {\n        // Clicking on the backdrop should move the implicit cursor, even if dialog cannot be\n        // focused. Create a fake thing to focus on. If the backdrop was _before_ the dialog, this\n        // would not be needed - clicks would move the implicit cursor there.\n        var fake = document.createElement('div');\n        this.dialog_.insertBefore(fake, this.dialog_.firstChild);\n        fake.tabIndex = -1;\n        fake.focus();\n        this.dialog_.removeChild(fake);\n      } else {\n        this.dialog_.focus();\n      }\n\n      var redirectedEvent = document.createEvent('MouseEvents');\n      redirectedEvent.initMouseEvent(e.type, e.bubbles, e.cancelable, window, e.detail, e.screenX, e.screenY, e.clientX, e.clientY, e.ctrlKey, e.altKey, e.shiftKey, e.metaKey, e.button, e.relatedTarget);\n      this.dialog_.dispatchEvent(redirectedEvent);\n      e.stopPropagation();\n    },\n\n    /**\n     * Focuses on the first focusable element within the dialog. This will always blur the current\n     * focus, even if nothing within the dialog is found.\n     */\n    focus_: function () {\n      // Find element with `autofocus` attribute, or fall back to the first form/tabindex control.\n      var target = this.dialog_.querySelector('[autofocus]:not([disabled])');\n\n      if (!target && this.dialog_.tabIndex >= 0) {\n        target = this.dialog_;\n      }\n\n      if (!target) {\n        // Note that this is 'any focusable area'. This list is probably not exhaustive, but the\n        // alternative involves stepping through and trying to focus everything.\n        var opts = ['button', 'input', 'keygen', 'select', 'textarea'];\n        var query = opts.map(function (el) {\n          return el + ':not([disabled])';\n        }); // TODO(samthor): tabindex values that are not numeric are not focusable.\n\n        query.push('[tabindex]:not([disabled]):not([tabindex=\"\"])'); // tabindex != \"\", not disabled\n\n        target = this.dialog_.querySelector(query.join(', '));\n      }\n\n      safeBlur(document.activeElement);\n      target && target.focus();\n    },\n\n    /**\n     * Sets the zIndex for the backdrop and dialog.\n     *\n     * @param {number} dialogZ\n     * @param {number} backdropZ\n     */\n    updateZIndex: function (dialogZ, backdropZ) {\n      if (dialogZ < backdropZ) {\n        throw new Error('dialogZ should never be < backdropZ');\n      }\n\n      this.dialog_.style.zIndex = dialogZ;\n      this.backdrop_.style.zIndex = backdropZ;\n    },\n\n    /**\n     * Shows the dialog. If the dialog is already open, this does nothing.\n     */\n    show: function () {\n      if (!this.dialog_.open) {\n        this.setOpen(true);\n        this.focus_();\n      }\n    },\n\n    /**\n     * Show this dialog modally.\n     */\n    showModal: function () {\n      if (this.dialog_.hasAttribute('open')) {\n        throw new Error('Failed to execute \\'showModal\\' on dialog: The element is already open, and therefore cannot be opened modally.');\n      }\n\n      if (!document.body.contains(this.dialog_)) {\n        throw new Error('Failed to execute \\'showModal\\' on dialog: The element is not in a Document.');\n      }\n\n      if (!dialogPolyfill.dm.pushDialog(this)) {\n        throw new Error('Failed to execute \\'showModal\\' on dialog: There are too many open modal dialogs.');\n      }\n\n      if (createsStackingContext(this.dialog_.parentElement)) {\n        console.warn('A dialog is being shown inside a stacking context. ' + 'This may cause it to be unusable. For more information, see this link: ' + 'https://github.com/GoogleChrome/dialog-polyfill/#stacking-context');\n      }\n\n      this.setOpen(true);\n      this.openAsModal_ = true; // Optionally center vertically, relative to the current viewport.\n\n      if (dialogPolyfill.needsCentering(this.dialog_)) {\n        dialogPolyfill.reposition(this.dialog_);\n        this.replacedStyleTop_ = true;\n      } else {\n        this.replacedStyleTop_ = false;\n      } // Insert backdrop.\n\n\n      this.dialog_.parentNode.insertBefore(this.backdrop_, this.dialog_.nextSibling); // Focus on whatever inside the dialog.\n\n      this.focus_();\n    },\n\n    /**\n     * Closes this HTMLDialogElement. This is optional vs clearing the open\n     * attribute, however this fires a 'close' event.\n     *\n     * @param {string=} opt_returnValue to use as the returnValue\n     */\n    close: function (opt_returnValue) {\n      if (!this.dialog_.hasAttribute('open')) {\n        throw new Error('Failed to execute \\'close\\' on dialog: The element does not have an \\'open\\' attribute, and therefore cannot be closed.');\n      }\n\n      this.setOpen(false); // Leave returnValue untouched in case it was set directly on the element\n\n      if (opt_returnValue !== undefined) {\n        this.dialog_.returnValue = opt_returnValue;\n      } // Triggering \"close\" event for any attached listeners on the <dialog>.\n\n\n      var closeEvent = new supportCustomEvent('close', {\n        bubbles: false,\n        cancelable: false\n      });\n      this.dialog_.dispatchEvent(closeEvent);\n    }\n  };\n  var dialogPolyfill = {};\n\n  dialogPolyfill.reposition = function (element) {\n    var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n    var topValue = scrollTop + (window.innerHeight - element.offsetHeight) / 2;\n    element.style.top = Math.max(scrollTop, topValue) + 'px';\n  };\n\n  dialogPolyfill.isInlinePositionSetByStylesheet = function (element) {\n    for (var i = 0; i < document.styleSheets.length; ++i) {\n      var styleSheet = document.styleSheets[i];\n      var cssRules = null; // Some browsers throw on cssRules.\n\n      try {\n        cssRules = styleSheet.cssRules;\n      } catch (e) {}\n\n      if (!cssRules) {\n        continue;\n      }\n\n      for (var j = 0; j < cssRules.length; ++j) {\n        var rule = cssRules[j];\n        var selectedNodes = null; // Ignore errors on invalid selector texts.\n\n        try {\n          selectedNodes = document.querySelectorAll(rule.selectorText);\n        } catch (e) {}\n\n        if (!selectedNodes || !inNodeList(selectedNodes, element)) {\n          continue;\n        }\n\n        var cssTop = rule.style.getPropertyValue('top');\n        var cssBottom = rule.style.getPropertyValue('bottom');\n\n        if (cssTop && cssTop !== 'auto' || cssBottom && cssBottom !== 'auto') {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  dialogPolyfill.needsCentering = function (dialog) {\n    var computedStyle = window.getComputedStyle(dialog);\n\n    if (computedStyle.position !== 'absolute') {\n      return false;\n    } // We must determine whether the top/bottom specified value is non-auto.  In\n    // WebKit/Blink, checking computedStyle.top == 'auto' is sufficient, but\n    // Firefox returns the used value. So we do this crazy thing instead: check\n    // the inline style and then go through CSS rules.\n\n\n    if (dialog.style.top !== 'auto' && dialog.style.top !== '' || dialog.style.bottom !== 'auto' && dialog.style.bottom !== '') {\n      return false;\n    }\n\n    return !dialogPolyfill.isInlinePositionSetByStylesheet(dialog);\n  };\n  /**\n   * @param {!Element} element to force upgrade\n   */\n\n\n  dialogPolyfill.forceRegisterDialog = function (element) {\n    if (window.HTMLDialogElement || element.showModal) {\n      console.warn('This browser already supports <dialog>, the polyfill ' + 'may not work correctly', element);\n    }\n\n    if (element.localName !== 'dialog') {\n      throw new Error('Failed to register dialog: The element is not a dialog.');\n    }\n\n    new dialogPolyfillInfo(\n    /** @type {!HTMLDialogElement} */\n    element);\n  };\n  /**\n   * @param {!Element} element to upgrade, if necessary\n   */\n\n\n  dialogPolyfill.registerDialog = function (element) {\n    if (!element.showModal) {\n      dialogPolyfill.forceRegisterDialog(element);\n    }\n  };\n  /**\n   * @constructor\n   */\n\n\n  dialogPolyfill.DialogManager = function () {\n    /** @type {!Array<!dialogPolyfillInfo>} */\n    this.pendingDialogStack = [];\n    var checkDOM = this.checkDOM_.bind(this); // The overlay is used to simulate how a modal dialog blocks the document.\n    // The blocking dialog is positioned on top of the overlay, and the rest of\n    // the dialogs on the pending dialog stack are positioned below it. In the\n    // actual implementation, the modal dialog stacking is controlled by the\n    // top layer, where z-index has no effect.\n\n    this.overlay = document.createElement('div');\n    this.overlay.className = '_dialog_overlay';\n    this.overlay.addEventListener('click', function (e) {\n      this.forwardTab_ = undefined;\n      e.stopPropagation();\n      checkDOM([]); // sanity-check DOM\n    }.bind(this));\n    this.handleKey_ = this.handleKey_.bind(this);\n    this.handleFocus_ = this.handleFocus_.bind(this);\n    this.zIndexLow_ = 100000;\n    this.zIndexHigh_ = 100000 + 150;\n    this.forwardTab_ = undefined;\n\n    if ('MutationObserver' in window) {\n      this.mo_ = new MutationObserver(function (records) {\n        var removed = [];\n        records.forEach(function (rec) {\n          for (var i = 0, c; c = rec.removedNodes[i]; ++i) {\n            if (!(c instanceof Element)) {\n              continue;\n            } else if (c.localName === 'dialog') {\n              removed.push(c);\n            }\n\n            removed = removed.concat(c.querySelectorAll('dialog'));\n          }\n        });\n        removed.length && checkDOM(removed);\n      });\n    }\n  };\n  /**\n   * Called on the first modal dialog being shown. Adds the overlay and related\n   * handlers.\n   */\n\n\n  dialogPolyfill.DialogManager.prototype.blockDocument = function () {\n    document.documentElement.addEventListener('focus', this.handleFocus_, true);\n    document.addEventListener('keydown', this.handleKey_);\n    this.mo_ && this.mo_.observe(document, {\n      childList: true,\n      subtree: true\n    });\n  };\n  /**\n   * Called on the first modal dialog being removed, i.e., when no more modal\n   * dialogs are visible.\n   */\n\n\n  dialogPolyfill.DialogManager.prototype.unblockDocument = function () {\n    document.documentElement.removeEventListener('focus', this.handleFocus_, true);\n    document.removeEventListener('keydown', this.handleKey_);\n    this.mo_ && this.mo_.disconnect();\n  };\n  /**\n   * Updates the stacking of all known dialogs.\n   */\n\n\n  dialogPolyfill.DialogManager.prototype.updateStacking = function () {\n    var zIndex = this.zIndexHigh_;\n\n    for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {\n      dpi.updateZIndex(--zIndex, --zIndex);\n\n      if (i === 0) {\n        this.overlay.style.zIndex = --zIndex;\n      }\n    } // Make the overlay a sibling of the dialog itself.\n\n\n    var last = this.pendingDialogStack[0];\n\n    if (last) {\n      var p = last.dialog.parentNode || document.body;\n      p.appendChild(this.overlay);\n    } else if (this.overlay.parentNode) {\n      this.overlay.parentNode.removeChild(this.overlay);\n    }\n  };\n  /**\n   * @param {Element} candidate to check if contained or is the top-most modal dialog\n   * @return {boolean} whether candidate is contained in top dialog\n   */\n\n\n  dialogPolyfill.DialogManager.prototype.containedByTopDialog_ = function (candidate) {\n    while (candidate = findNearestDialog(candidate)) {\n      for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {\n        if (dpi.dialog === candidate) {\n          return i === 0; // only valid if top-most\n        }\n      }\n\n      candidate = candidate.parentElement;\n    }\n\n    return false;\n  };\n\n  dialogPolyfill.DialogManager.prototype.handleFocus_ = function (event) {\n    if (this.containedByTopDialog_(event.target)) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n    safeBlur(\n    /** @type {Element} */\n    event.target);\n\n    if (this.forwardTab_ === undefined) {\n      return;\n    } // move focus only from a tab key\n\n\n    var dpi = this.pendingDialogStack[0];\n    var dialog = dpi.dialog;\n    var position = dialog.compareDocumentPosition(event.target);\n\n    if (position & Node.DOCUMENT_POSITION_PRECEDING) {\n      if (this.forwardTab_) {\n        // forward\n        dpi.focus_();\n      } else {\n        // backwards\n        document.documentElement.focus();\n      }\n    } else {// TODO: Focus after the dialog, is ignored.\n    }\n\n    return false;\n  };\n\n  dialogPolyfill.DialogManager.prototype.handleKey_ = function (event) {\n    this.forwardTab_ = undefined;\n\n    if (event.keyCode === 27) {\n      event.preventDefault();\n      event.stopPropagation();\n      var cancelEvent = new supportCustomEvent('cancel', {\n        bubbles: false,\n        cancelable: true\n      });\n      var dpi = this.pendingDialogStack[0];\n\n      if (dpi && dpi.dialog.dispatchEvent(cancelEvent)) {\n        dpi.dialog.close();\n      }\n    } else if (event.keyCode === 9) {\n      this.forwardTab_ = !event.shiftKey;\n    }\n  };\n  /**\n   * Finds and downgrades any known modal dialogs that are no longer displayed. Dialogs that are\n   * removed and immediately readded don't stay modal, they become normal.\n   *\n   * @param {!Array<!HTMLDialogElement>} removed that have definitely been removed\n   */\n\n\n  dialogPolyfill.DialogManager.prototype.checkDOM_ = function (removed) {\n    // This operates on a clone because it may cause it to change. Each change also calls\n    // updateStacking, which only actually needs to happen once. But who removes many modal dialogs\n    // at a time?!\n    var clone = this.pendingDialogStack.slice();\n    clone.forEach(function (dpi) {\n      if (removed.indexOf(dpi.dialog) !== -1) {\n        dpi.downgradeModal();\n      } else {\n        dpi.maybeHideModal();\n      }\n    });\n  };\n  /**\n   * @param {!dialogPolyfillInfo} dpi\n   * @return {boolean} whether the dialog was allowed\n   */\n\n\n  dialogPolyfill.DialogManager.prototype.pushDialog = function (dpi) {\n    var allowed = (this.zIndexHigh_ - this.zIndexLow_) / 2 - 1;\n\n    if (this.pendingDialogStack.length >= allowed) {\n      return false;\n    }\n\n    if (this.pendingDialogStack.unshift(dpi) === 1) {\n      this.blockDocument();\n    }\n\n    this.updateStacking();\n    return true;\n  };\n  /**\n   * @param {!dialogPolyfillInfo} dpi\n   */\n\n\n  dialogPolyfill.DialogManager.prototype.removeDialog = function (dpi) {\n    var index = this.pendingDialogStack.indexOf(dpi);\n\n    if (index === -1) {\n      return;\n    }\n\n    this.pendingDialogStack.splice(index, 1);\n\n    if (this.pendingDialogStack.length === 0) {\n      this.unblockDocument();\n    }\n\n    this.updateStacking();\n  };\n\n  dialogPolyfill.dm = new dialogPolyfill.DialogManager();\n  dialogPolyfill.formSubmitter = null;\n  dialogPolyfill.useValue = null;\n  /**\n   * Installs global handlers, such as click listers and native method overrides. These are needed\n   * even if a no dialog is registered, as they deal with <form method=\"dialog\">.\n   */\n\n  if (window.HTMLDialogElement === undefined) {\n    /**\n     * If HTMLFormElement translates method=\"DIALOG\" into 'get', then replace the descriptor with\n     * one that returns the correct value.\n     */\n    var testForm = document.createElement('form');\n    testForm.setAttribute('method', 'dialog');\n\n    if (testForm.method !== 'dialog') {\n      var methodDescriptor = Object.getOwnPropertyDescriptor(HTMLFormElement.prototype, 'method');\n\n      if (methodDescriptor) {\n        // nb. Some older iOS and older PhantomJS fail to return the descriptor. Don't do anything\n        // and don't bother to update the element.\n        var realGet = methodDescriptor.get;\n\n        methodDescriptor.get = function () {\n          if (isFormMethodDialog(this)) {\n            return 'dialog';\n          }\n\n          return realGet.call(this);\n        };\n\n        var realSet = methodDescriptor.set;\n\n        methodDescriptor.set = function (v) {\n          if (typeof v === 'string' && v.toLowerCase() === 'dialog') {\n            return this.setAttribute('method', v);\n          }\n\n          return realSet.call(this, v);\n        };\n\n        Object.defineProperty(HTMLFormElement.prototype, 'method', methodDescriptor);\n      }\n    }\n    /**\n     * Global 'click' handler, to capture the <input type=\"submit\"> or <button> element which has\n     * submitted a <form method=\"dialog\">. Needed as Safari and others don't report this inside\n     * document.activeElement.\n     */\n\n\n    document.addEventListener('click', function (ev) {\n      dialogPolyfill.formSubmitter = null;\n      dialogPolyfill.useValue = null;\n\n      if (ev.defaultPrevented) {\n        return;\n      } // e.g. a submit which prevents default submission\n\n\n      var target =\n      /** @type {Element} */\n      ev.target;\n\n      if (!target || !isFormMethodDialog(target.form)) {\n        return;\n      }\n\n      var valid = target.type === 'submit' && ['button', 'input'].indexOf(target.localName) > -1;\n\n      if (!valid) {\n        if (!(target.localName === 'input' && target.type === 'image')) {\n          return;\n        } // this is a <input type=\"image\">, which can submit forms\n\n\n        dialogPolyfill.useValue = ev.offsetX + ',' + ev.offsetY;\n      }\n\n      var dialog = findNearestDialog(target);\n\n      if (!dialog) {\n        return;\n      }\n\n      dialogPolyfill.formSubmitter = target;\n    }, false);\n    /**\n     * Replace the native HTMLFormElement.submit() method, as it won't fire the\n     * submit event and give us a chance to respond.\n     */\n\n    var nativeFormSubmit = HTMLFormElement.prototype.submit;\n\n    var replacementFormSubmit = function () {\n      if (!isFormMethodDialog(this)) {\n        return nativeFormSubmit.call(this);\n      }\n\n      var dialog = findNearestDialog(this);\n      dialog && dialog.close();\n    };\n\n    HTMLFormElement.prototype.submit = replacementFormSubmit;\n    /**\n     * Global form 'dialog' method handler. Closes a dialog correctly on submit\n     * and possibly sets its return value.\n     */\n\n    document.addEventListener('submit', function (ev) {\n      var form =\n      /** @type {HTMLFormElement} */\n      ev.target;\n\n      if (!isFormMethodDialog(form)) {\n        return;\n      }\n\n      ev.preventDefault();\n      var dialog = findNearestDialog(form);\n\n      if (!dialog) {\n        return;\n      } // Forms can only be submitted via .submit() or a click (?), but anyway: sanity-check that\n      // the submitter is correct before using its value as .returnValue.\n\n\n      var s = dialogPolyfill.formSubmitter;\n\n      if (s && s.form === form) {\n        dialog.close(dialogPolyfill.useValue || s.value);\n      } else {\n        dialog.close();\n      }\n\n      dialogPolyfill.formSubmitter = null;\n    }, true);\n  }\n\n  dialogPolyfill['forceRegisterDialog'] = dialogPolyfill.forceRegisterDialog;\n  dialogPolyfill['registerDialog'] = dialogPolyfill.registerDialog;\n\n  if (typeof define === 'function' && 'amd' in define) {\n    // AMD support\n    define(function () {\n      return dialogPolyfill;\n    });\n  } else if (typeof module === 'object' && typeof module['exports'] === 'object') {\n    // CommonJS support\n    module['exports'] = dialogPolyfill;\n  } else {\n    // all others\n    window['dialogPolyfill'] = dialogPolyfill;\n  }\n})();","map":{"version":3,"sources":["C:/Users/Kao/Desktop/GI472(ส.)/Visual Studio Code/pwa-course-2022/pwa-course-2022/node_modules/dialog-polyfill/dialog-polyfill.js"],"names":["supportCustomEvent","window","CustomEvent","event","x","ev","document","createEvent","initCustomEvent","bubbles","cancelable","detail","prototype","Event","createsStackingContext","el","body","s","getComputedStyle","invalid","k","ok","undefined","opacity","position","webkitOverflowScrolling","parentElement","findNearestDialog","localName","safeBlur","blur","inNodeList","nodeList","node","i","length","isFormMethodDialog","hasAttribute","getAttribute","toLowerCase","dialogPolyfillInfo","dialog","dialog_","replacedStyleTop_","openAsModal_","setAttribute","show","bind","showModal","close","returnValue","mo","MutationObserver","maybeHideModal","observe","attributes","attributeFilter","removed","cb","downgradeModal","timeout","delayModel","target","cand","type","substr","clearTimeout","setTimeout","forEach","name","addEventListener","Object","defineProperty","set","setOpen","get","backdrop_","createElement","className","backdropClick_","contains","style","zIndex","top","parentNode","removeChild","dialogPolyfill","dm","removeDialog","value","removeAttribute","e","fake","insertBefore","firstChild","tabIndex","focus","redirectedEvent","initMouseEvent","screenX","screenY","clientX","clientY","ctrlKey","altKey","shiftKey","metaKey","button","relatedTarget","dispatchEvent","stopPropagation","focus_","querySelector","opts","query","map","push","join","activeElement","updateZIndex","dialogZ","backdropZ","Error","open","pushDialog","console","warn","needsCentering","reposition","nextSibling","opt_returnValue","closeEvent","element","scrollTop","documentElement","topValue","innerHeight","offsetHeight","Math","max","isInlinePositionSetByStylesheet","styleSheets","styleSheet","cssRules","j","rule","selectedNodes","querySelectorAll","selectorText","cssTop","getPropertyValue","cssBottom","computedStyle","bottom","forceRegisterDialog","HTMLDialogElement","registerDialog","DialogManager","pendingDialogStack","checkDOM","checkDOM_","overlay","forwardTab_","handleKey_","handleFocus_","zIndexLow_","zIndexHigh_","mo_","records","rec","c","removedNodes","Element","concat","blockDocument","childList","subtree","unblockDocument","removeEventListener","disconnect","updateStacking","dpi","last","p","appendChild","containedByTopDialog_","candidate","preventDefault","compareDocumentPosition","Node","DOCUMENT_POSITION_PRECEDING","keyCode","cancelEvent","clone","slice","indexOf","allowed","unshift","index","splice","formSubmitter","useValue","testForm","method","methodDescriptor","getOwnPropertyDescriptor","HTMLFormElement","realGet","call","realSet","v","defaultPrevented","form","valid","offsetX","offsetY","nativeFormSubmit","submit","replacementFormSubmit","define","module"],"mappings":"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","sourcesContent":["(function() {\n\n  // nb. This is for IE10 and lower _only_.\n  var supportCustomEvent = window.CustomEvent;\n  if (!supportCustomEvent || typeof supportCustomEvent === 'object') {\n    supportCustomEvent = function CustomEvent(event, x) {\n      x = x || {};\n      var ev = document.createEvent('CustomEvent');\n      ev.initCustomEvent(event, !!x.bubbles, !!x.cancelable, x.detail || null);\n      return ev;\n    };\n    supportCustomEvent.prototype = window.Event.prototype;\n  }\n\n  /**\n   * @param {Element} el to check for stacking context\n   * @return {boolean} whether this el or its parents creates a stacking context\n   */\n  function createsStackingContext(el) {\n    while (el && el !== document.body) {\n      var s = window.getComputedStyle(el);\n      var invalid = function(k, ok) {\n        return !(s[k] === undefined || s[k] === ok);\n      }\n      if (s.opacity < 1 ||\n          invalid('zIndex', 'auto') ||\n          invalid('transform', 'none') ||\n          invalid('mixBlendMode', 'normal') ||\n          invalid('filter', 'none') ||\n          invalid('perspective', 'none') ||\n          s['isolation'] === 'isolate' ||\n          s.position === 'fixed' ||\n          s.webkitOverflowScrolling === 'touch') {\n        return true;\n      }\n      el = el.parentElement;\n    }\n    return false;\n  }\n\n  /**\n   * Finds the nearest <dialog> from the passed element.\n   *\n   * @param {Element} el to search from\n   * @return {HTMLDialogElement} dialog found\n   */\n  function findNearestDialog(el) {\n    while (el) {\n      if (el.localName === 'dialog') {\n        return /** @type {HTMLDialogElement} */ (el);\n      }\n      el = el.parentElement;\n    }\n    return null;\n  }\n\n  /**\n   * Blur the specified element, as long as it's not the HTML body element.\n   * This works around an IE9/10 bug - blurring the body causes Windows to\n   * blur the whole application.\n   *\n   * @param {Element} el to blur\n   */\n  function safeBlur(el) {\n    if (el && el.blur && el !== document.body) {\n      el.blur();\n    }\n  }\n\n  /**\n   * @param {!NodeList} nodeList to search\n   * @param {Node} node to find\n   * @return {boolean} whether node is inside nodeList\n   */\n  function inNodeList(nodeList, node) {\n    for (var i = 0; i < nodeList.length; ++i) {\n      if (nodeList[i] === node) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {HTMLFormElement} el to check\n   * @return {boolean} whether this form has method=\"dialog\"\n   */\n  function isFormMethodDialog(el) {\n    if (!el || !el.hasAttribute('method')) {\n      return false;\n    }\n    return el.getAttribute('method').toLowerCase() === 'dialog';\n  }\n\n  /**\n   * @param {!HTMLDialogElement} dialog to upgrade\n   * @constructor\n   */\n  function dialogPolyfillInfo(dialog) {\n    this.dialog_ = dialog;\n    this.replacedStyleTop_ = false;\n    this.openAsModal_ = false;\n\n    // Set a11y role. Browsers that support dialog implicitly know this already.\n    if (!dialog.hasAttribute('role')) {\n      dialog.setAttribute('role', 'dialog');\n    }\n\n    dialog.show = this.show.bind(this);\n    dialog.showModal = this.showModal.bind(this);\n    dialog.close = this.close.bind(this);\n\n    if (!('returnValue' in dialog)) {\n      dialog.returnValue = '';\n    }\n\n    if ('MutationObserver' in window) {\n      var mo = new MutationObserver(this.maybeHideModal.bind(this));\n      mo.observe(dialog, {attributes: true, attributeFilter: ['open']});\n    } else {\n      // IE10 and below support. Note that DOMNodeRemoved etc fire _before_ removal. They also\n      // seem to fire even if the element was removed as part of a parent removal. Use the removed\n      // events to force downgrade (useful if removed/immediately added).\n      var removed = false;\n      var cb = function() {\n        removed ? this.downgradeModal() : this.maybeHideModal();\n        removed = false;\n      }.bind(this);\n      var timeout;\n      var delayModel = function(ev) {\n        if (ev.target !== dialog) { return; }  // not for a child element\n        var cand = 'DOMNodeRemoved';\n        removed |= (ev.type.substr(0, cand.length) === cand);\n        window.clearTimeout(timeout);\n        timeout = window.setTimeout(cb, 0);\n      };\n      ['DOMAttrModified', 'DOMNodeRemoved', 'DOMNodeRemovedFromDocument'].forEach(function(name) {\n        dialog.addEventListener(name, delayModel);\n      });\n    }\n    // Note that the DOM is observed inside DialogManager while any dialog\n    // is being displayed as a modal, to catch modal removal from the DOM.\n\n    Object.defineProperty(dialog, 'open', {\n      set: this.setOpen.bind(this),\n      get: dialog.hasAttribute.bind(dialog, 'open')\n    });\n\n    this.backdrop_ = document.createElement('div');\n    this.backdrop_.className = 'backdrop';\n    this.backdrop_.addEventListener('click', this.backdropClick_.bind(this));\n  }\n\n  dialogPolyfillInfo.prototype = {\n\n    get dialog() {\n      return this.dialog_;\n    },\n\n    /**\n     * Maybe remove this dialog from the modal top layer. This is called when\n     * a modal dialog may no longer be tenable, e.g., when the dialog is no\n     * longer open or is no longer part of the DOM.\n     */\n    maybeHideModal: function() {\n      if (this.dialog_.hasAttribute('open') && document.body.contains(this.dialog_)) { return; }\n      this.downgradeModal();\n    },\n\n    /**\n     * Remove this dialog from the modal top layer, leaving it as a non-modal.\n     */\n    downgradeModal: function() {\n      if (!this.openAsModal_) { return; }\n      this.openAsModal_ = false;\n      this.dialog_.style.zIndex = '';\n\n      // This won't match the native <dialog> exactly because if the user set top on a centered\n      // polyfill dialog, that top gets thrown away when the dialog is closed. Not sure it's\n      // possible to polyfill this perfectly.\n      if (this.replacedStyleTop_) {\n        this.dialog_.style.top = '';\n        this.replacedStyleTop_ = false;\n      }\n\n      // Clear the backdrop and remove from the manager.\n      this.backdrop_.parentNode && this.backdrop_.parentNode.removeChild(this.backdrop_);\n      dialogPolyfill.dm.removeDialog(this);\n    },\n\n    /**\n     * @param {boolean} value whether to open or close this dialog\n     */\n    setOpen: function(value) {\n      if (value) {\n        this.dialog_.hasAttribute('open') || this.dialog_.setAttribute('open', '');\n      } else {\n        this.dialog_.removeAttribute('open');\n        this.maybeHideModal();  // nb. redundant with MutationObserver\n      }\n    },\n\n    /**\n     * Handles clicks on the fake .backdrop element, redirecting them as if\n     * they were on the dialog itself.\n     *\n     * @param {!Event} e to redirect\n     */\n    backdropClick_: function(e) {\n      if (!this.dialog_.hasAttribute('tabindex')) {\n        // Clicking on the backdrop should move the implicit cursor, even if dialog cannot be\n        // focused. Create a fake thing to focus on. If the backdrop was _before_ the dialog, this\n        // would not be needed - clicks would move the implicit cursor there.\n        var fake = document.createElement('div');\n        this.dialog_.insertBefore(fake, this.dialog_.firstChild);\n        fake.tabIndex = -1;\n        fake.focus();\n        this.dialog_.removeChild(fake);\n      } else {\n        this.dialog_.focus();\n      }\n\n      var redirectedEvent = document.createEvent('MouseEvents');\n      redirectedEvent.initMouseEvent(e.type, e.bubbles, e.cancelable, window,\n          e.detail, e.screenX, e.screenY, e.clientX, e.clientY, e.ctrlKey,\n          e.altKey, e.shiftKey, e.metaKey, e.button, e.relatedTarget);\n      this.dialog_.dispatchEvent(redirectedEvent);\n      e.stopPropagation();\n    },\n\n    /**\n     * Focuses on the first focusable element within the dialog. This will always blur the current\n     * focus, even if nothing within the dialog is found.\n     */\n    focus_: function() {\n      // Find element with `autofocus` attribute, or fall back to the first form/tabindex control.\n      var target = this.dialog_.querySelector('[autofocus]:not([disabled])');\n      if (!target && this.dialog_.tabIndex >= 0) {\n        target = this.dialog_;\n      }\n      if (!target) {\n        // Note that this is 'any focusable area'. This list is probably not exhaustive, but the\n        // alternative involves stepping through and trying to focus everything.\n        var opts = ['button', 'input', 'keygen', 'select', 'textarea'];\n        var query = opts.map(function(el) {\n          return el + ':not([disabled])';\n        });\n        // TODO(samthor): tabindex values that are not numeric are not focusable.\n        query.push('[tabindex]:not([disabled]):not([tabindex=\"\"])');  // tabindex != \"\", not disabled\n        target = this.dialog_.querySelector(query.join(', '));\n      }\n      safeBlur(document.activeElement);\n      target && target.focus();\n    },\n\n    /**\n     * Sets the zIndex for the backdrop and dialog.\n     *\n     * @param {number} dialogZ\n     * @param {number} backdropZ\n     */\n    updateZIndex: function(dialogZ, backdropZ) {\n      if (dialogZ < backdropZ) {\n        throw new Error('dialogZ should never be < backdropZ');\n      }\n      this.dialog_.style.zIndex = dialogZ;\n      this.backdrop_.style.zIndex = backdropZ;\n    },\n\n    /**\n     * Shows the dialog. If the dialog is already open, this does nothing.\n     */\n    show: function() {\n      if (!this.dialog_.open) {\n        this.setOpen(true);\n        this.focus_();\n      }\n    },\n\n    /**\n     * Show this dialog modally.\n     */\n    showModal: function() {\n      if (this.dialog_.hasAttribute('open')) {\n        throw new Error('Failed to execute \\'showModal\\' on dialog: The element is already open, and therefore cannot be opened modally.');\n      }\n      if (!document.body.contains(this.dialog_)) {\n        throw new Error('Failed to execute \\'showModal\\' on dialog: The element is not in a Document.');\n      }\n      if (!dialogPolyfill.dm.pushDialog(this)) {\n        throw new Error('Failed to execute \\'showModal\\' on dialog: There are too many open modal dialogs.');\n      }\n\n      if (createsStackingContext(this.dialog_.parentElement)) {\n        console.warn('A dialog is being shown inside a stacking context. ' +\n            'This may cause it to be unusable. For more information, see this link: ' +\n            'https://github.com/GoogleChrome/dialog-polyfill/#stacking-context');\n      }\n\n      this.setOpen(true);\n      this.openAsModal_ = true;\n\n      // Optionally center vertically, relative to the current viewport.\n      if (dialogPolyfill.needsCentering(this.dialog_)) {\n        dialogPolyfill.reposition(this.dialog_);\n        this.replacedStyleTop_ = true;\n      } else {\n        this.replacedStyleTop_ = false;\n      }\n\n      // Insert backdrop.\n      this.dialog_.parentNode.insertBefore(this.backdrop_, this.dialog_.nextSibling);\n\n      // Focus on whatever inside the dialog.\n      this.focus_();\n    },\n\n    /**\n     * Closes this HTMLDialogElement. This is optional vs clearing the open\n     * attribute, however this fires a 'close' event.\n     *\n     * @param {string=} opt_returnValue to use as the returnValue\n     */\n    close: function(opt_returnValue) {\n      if (!this.dialog_.hasAttribute('open')) {\n        throw new Error('Failed to execute \\'close\\' on dialog: The element does not have an \\'open\\' attribute, and therefore cannot be closed.');\n      }\n      this.setOpen(false);\n\n      // Leave returnValue untouched in case it was set directly on the element\n      if (opt_returnValue !== undefined) {\n        this.dialog_.returnValue = opt_returnValue;\n      }\n\n      // Triggering \"close\" event for any attached listeners on the <dialog>.\n      var closeEvent = new supportCustomEvent('close', {\n        bubbles: false,\n        cancelable: false\n      });\n      this.dialog_.dispatchEvent(closeEvent);\n    }\n\n  };\n\n  var dialogPolyfill = {};\n\n  dialogPolyfill.reposition = function(element) {\n    var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n    var topValue = scrollTop + (window.innerHeight - element.offsetHeight) / 2;\n    element.style.top = Math.max(scrollTop, topValue) + 'px';\n  };\n\n  dialogPolyfill.isInlinePositionSetByStylesheet = function(element) {\n    for (var i = 0; i < document.styleSheets.length; ++i) {\n      var styleSheet = document.styleSheets[i];\n      var cssRules = null;\n      // Some browsers throw on cssRules.\n      try {\n        cssRules = styleSheet.cssRules;\n      } catch (e) {}\n      if (!cssRules) { continue; }\n      for (var j = 0; j < cssRules.length; ++j) {\n        var rule = cssRules[j];\n        var selectedNodes = null;\n        // Ignore errors on invalid selector texts.\n        try {\n          selectedNodes = document.querySelectorAll(rule.selectorText);\n        } catch(e) {}\n        if (!selectedNodes || !inNodeList(selectedNodes, element)) {\n          continue;\n        }\n        var cssTop = rule.style.getPropertyValue('top');\n        var cssBottom = rule.style.getPropertyValue('bottom');\n        if ((cssTop && cssTop !== 'auto') || (cssBottom && cssBottom !== 'auto')) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  dialogPolyfill.needsCentering = function(dialog) {\n    var computedStyle = window.getComputedStyle(dialog);\n    if (computedStyle.position !== 'absolute') {\n      return false;\n    }\n\n    // We must determine whether the top/bottom specified value is non-auto.  In\n    // WebKit/Blink, checking computedStyle.top == 'auto' is sufficient, but\n    // Firefox returns the used value. So we do this crazy thing instead: check\n    // the inline style and then go through CSS rules.\n    if ((dialog.style.top !== 'auto' && dialog.style.top !== '') ||\n        (dialog.style.bottom !== 'auto' && dialog.style.bottom !== '')) {\n      return false;\n    }\n    return !dialogPolyfill.isInlinePositionSetByStylesheet(dialog);\n  };\n\n  /**\n   * @param {!Element} element to force upgrade\n   */\n  dialogPolyfill.forceRegisterDialog = function(element) {\n    if (window.HTMLDialogElement || element.showModal) {\n      console.warn('This browser already supports <dialog>, the polyfill ' +\n          'may not work correctly', element);\n    }\n    if (element.localName !== 'dialog') {\n      throw new Error('Failed to register dialog: The element is not a dialog.');\n    }\n    new dialogPolyfillInfo(/** @type {!HTMLDialogElement} */ (element));\n  };\n\n  /**\n   * @param {!Element} element to upgrade, if necessary\n   */\n  dialogPolyfill.registerDialog = function(element) {\n    if (!element.showModal) {\n      dialogPolyfill.forceRegisterDialog(element);\n    }\n  };\n\n  /**\n   * @constructor\n   */\n  dialogPolyfill.DialogManager = function() {\n    /** @type {!Array<!dialogPolyfillInfo>} */\n    this.pendingDialogStack = [];\n\n    var checkDOM = this.checkDOM_.bind(this);\n\n    // The overlay is used to simulate how a modal dialog blocks the document.\n    // The blocking dialog is positioned on top of the overlay, and the rest of\n    // the dialogs on the pending dialog stack are positioned below it. In the\n    // actual implementation, the modal dialog stacking is controlled by the\n    // top layer, where z-index has no effect.\n    this.overlay = document.createElement('div');\n    this.overlay.className = '_dialog_overlay';\n    this.overlay.addEventListener('click', function(e) {\n      this.forwardTab_ = undefined;\n      e.stopPropagation();\n      checkDOM([]);  // sanity-check DOM\n    }.bind(this));\n\n    this.handleKey_ = this.handleKey_.bind(this);\n    this.handleFocus_ = this.handleFocus_.bind(this);\n\n    this.zIndexLow_ = 100000;\n    this.zIndexHigh_ = 100000 + 150;\n\n    this.forwardTab_ = undefined;\n\n    if ('MutationObserver' in window) {\n      this.mo_ = new MutationObserver(function(records) {\n        var removed = [];\n        records.forEach(function(rec) {\n          for (var i = 0, c; c = rec.removedNodes[i]; ++i) {\n            if (!(c instanceof Element)) {\n              continue;\n            } else if (c.localName === 'dialog') {\n              removed.push(c);\n            }\n            removed = removed.concat(c.querySelectorAll('dialog'));\n          }\n        });\n        removed.length && checkDOM(removed);\n      });\n    }\n  };\n\n  /**\n   * Called on the first modal dialog being shown. Adds the overlay and related\n   * handlers.\n   */\n  dialogPolyfill.DialogManager.prototype.blockDocument = function() {\n    document.documentElement.addEventListener('focus', this.handleFocus_, true);\n    document.addEventListener('keydown', this.handleKey_);\n    this.mo_ && this.mo_.observe(document, {childList: true, subtree: true});\n  };\n\n  /**\n   * Called on the first modal dialog being removed, i.e., when no more modal\n   * dialogs are visible.\n   */\n  dialogPolyfill.DialogManager.prototype.unblockDocument = function() {\n    document.documentElement.removeEventListener('focus', this.handleFocus_, true);\n    document.removeEventListener('keydown', this.handleKey_);\n    this.mo_ && this.mo_.disconnect();\n  };\n\n  /**\n   * Updates the stacking of all known dialogs.\n   */\n  dialogPolyfill.DialogManager.prototype.updateStacking = function() {\n    var zIndex = this.zIndexHigh_;\n\n    for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {\n      dpi.updateZIndex(--zIndex, --zIndex);\n      if (i === 0) {\n        this.overlay.style.zIndex = --zIndex;\n      }\n    }\n\n    // Make the overlay a sibling of the dialog itself.\n    var last = this.pendingDialogStack[0];\n    if (last) {\n      var p = last.dialog.parentNode || document.body;\n      p.appendChild(this.overlay);\n    } else if (this.overlay.parentNode) {\n      this.overlay.parentNode.removeChild(this.overlay);\n    }\n  };\n\n  /**\n   * @param {Element} candidate to check if contained or is the top-most modal dialog\n   * @return {boolean} whether candidate is contained in top dialog\n   */\n  dialogPolyfill.DialogManager.prototype.containedByTopDialog_ = function(candidate) {\n    while (candidate = findNearestDialog(candidate)) {\n      for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {\n        if (dpi.dialog === candidate) {\n          return i === 0;  // only valid if top-most\n        }\n      }\n      candidate = candidate.parentElement;\n    }\n    return false;\n  };\n\n  dialogPolyfill.DialogManager.prototype.handleFocus_ = function(event) {\n    if (this.containedByTopDialog_(event.target)) { return; }\n\n    event.preventDefault();\n    event.stopPropagation();\n    safeBlur(/** @type {Element} */ (event.target));\n\n    if (this.forwardTab_ === undefined) { return; }  // move focus only from a tab key\n\n    var dpi = this.pendingDialogStack[0];\n    var dialog = dpi.dialog;\n    var position = dialog.compareDocumentPosition(event.target);\n    if (position & Node.DOCUMENT_POSITION_PRECEDING) {\n      if (this.forwardTab_) {  // forward\n        dpi.focus_();\n      } else {  // backwards\n        document.documentElement.focus();\n      }\n    } else {\n      // TODO: Focus after the dialog, is ignored.\n    }\n\n    return false;\n  };\n\n  dialogPolyfill.DialogManager.prototype.handleKey_ = function(event) {\n    this.forwardTab_ = undefined;\n    if (event.keyCode === 27) {\n      event.preventDefault();\n      event.stopPropagation();\n      var cancelEvent = new supportCustomEvent('cancel', {\n        bubbles: false,\n        cancelable: true\n      });\n      var dpi = this.pendingDialogStack[0];\n      if (dpi && dpi.dialog.dispatchEvent(cancelEvent)) {\n        dpi.dialog.close();\n      }\n    } else if (event.keyCode === 9) {\n      this.forwardTab_ = !event.shiftKey;\n    }\n  };\n\n  /**\n   * Finds and downgrades any known modal dialogs that are no longer displayed. Dialogs that are\n   * removed and immediately readded don't stay modal, they become normal.\n   *\n   * @param {!Array<!HTMLDialogElement>} removed that have definitely been removed\n   */\n  dialogPolyfill.DialogManager.prototype.checkDOM_ = function(removed) {\n    // This operates on a clone because it may cause it to change. Each change also calls\n    // updateStacking, which only actually needs to happen once. But who removes many modal dialogs\n    // at a time?!\n    var clone = this.pendingDialogStack.slice();\n    clone.forEach(function(dpi) {\n      if (removed.indexOf(dpi.dialog) !== -1) {\n        dpi.downgradeModal();\n      } else {\n        dpi.maybeHideModal();\n      }\n    });\n  };\n\n  /**\n   * @param {!dialogPolyfillInfo} dpi\n   * @return {boolean} whether the dialog was allowed\n   */\n  dialogPolyfill.DialogManager.prototype.pushDialog = function(dpi) {\n    var allowed = (this.zIndexHigh_ - this.zIndexLow_) / 2 - 1;\n    if (this.pendingDialogStack.length >= allowed) {\n      return false;\n    }\n    if (this.pendingDialogStack.unshift(dpi) === 1) {\n      this.blockDocument();\n    }\n    this.updateStacking();\n    return true;\n  };\n\n  /**\n   * @param {!dialogPolyfillInfo} dpi\n   */\n  dialogPolyfill.DialogManager.prototype.removeDialog = function(dpi) {\n    var index = this.pendingDialogStack.indexOf(dpi);\n    if (index === -1) { return; }\n\n    this.pendingDialogStack.splice(index, 1);\n    if (this.pendingDialogStack.length === 0) {\n      this.unblockDocument();\n    }\n    this.updateStacking();\n  };\n\n  dialogPolyfill.dm = new dialogPolyfill.DialogManager();\n  dialogPolyfill.formSubmitter = null;\n  dialogPolyfill.useValue = null;\n\n  /**\n   * Installs global handlers, such as click listers and native method overrides. These are needed\n   * even if a no dialog is registered, as they deal with <form method=\"dialog\">.\n   */\n  if (window.HTMLDialogElement === undefined) {\n\n    /**\n     * If HTMLFormElement translates method=\"DIALOG\" into 'get', then replace the descriptor with\n     * one that returns the correct value.\n     */\n    var testForm = document.createElement('form');\n    testForm.setAttribute('method', 'dialog');\n    if (testForm.method !== 'dialog') {\n      var methodDescriptor = Object.getOwnPropertyDescriptor(HTMLFormElement.prototype, 'method');\n      if (methodDescriptor) {\n        // nb. Some older iOS and older PhantomJS fail to return the descriptor. Don't do anything\n        // and don't bother to update the element.\n        var realGet = methodDescriptor.get;\n        methodDescriptor.get = function() {\n          if (isFormMethodDialog(this)) {\n            return 'dialog';\n          }\n          return realGet.call(this);\n        };\n        var realSet = methodDescriptor.set;\n        methodDescriptor.set = function(v) {\n          if (typeof v === 'string' && v.toLowerCase() === 'dialog') {\n            return this.setAttribute('method', v);\n          }\n          return realSet.call(this, v);\n        };\n        Object.defineProperty(HTMLFormElement.prototype, 'method', methodDescriptor);\n      }\n    }\n\n    /**\n     * Global 'click' handler, to capture the <input type=\"submit\"> or <button> element which has\n     * submitted a <form method=\"dialog\">. Needed as Safari and others don't report this inside\n     * document.activeElement.\n     */\n    document.addEventListener('click', function(ev) {\n      dialogPolyfill.formSubmitter = null;\n      dialogPolyfill.useValue = null;\n      if (ev.defaultPrevented) { return; }  // e.g. a submit which prevents default submission\n\n      var target = /** @type {Element} */ (ev.target);\n      if (!target || !isFormMethodDialog(target.form)) { return; }\n\n      var valid = (target.type === 'submit' && ['button', 'input'].indexOf(target.localName) > -1);\n      if (!valid) {\n        if (!(target.localName === 'input' && target.type === 'image')) { return; }\n        // this is a <input type=\"image\">, which can submit forms\n        dialogPolyfill.useValue = ev.offsetX + ',' + ev.offsetY;\n      }\n\n      var dialog = findNearestDialog(target);\n      if (!dialog) { return; }\n\n      dialogPolyfill.formSubmitter = target;\n    }, false);\n\n    /**\n     * Replace the native HTMLFormElement.submit() method, as it won't fire the\n     * submit event and give us a chance to respond.\n     */\n    var nativeFormSubmit = HTMLFormElement.prototype.submit;\n    var replacementFormSubmit = function () {\n      if (!isFormMethodDialog(this)) {\n        return nativeFormSubmit.call(this);\n      }\n      var dialog = findNearestDialog(this);\n      dialog && dialog.close();\n    };\n    HTMLFormElement.prototype.submit = replacementFormSubmit;\n\n    /**\n     * Global form 'dialog' method handler. Closes a dialog correctly on submit\n     * and possibly sets its return value.\n     */\n    document.addEventListener('submit', function(ev) {\n      var form = /** @type {HTMLFormElement} */ (ev.target);\n      if (!isFormMethodDialog(form)) { return; }\n      ev.preventDefault();\n\n      var dialog = findNearestDialog(form);\n      if (!dialog) { return; }\n\n      // Forms can only be submitted via .submit() or a click (?), but anyway: sanity-check that\n      // the submitter is correct before using its value as .returnValue.\n      var s = dialogPolyfill.formSubmitter;\n      if (s && s.form === form) {\n        dialog.close(dialogPolyfill.useValue || s.value);\n      } else {\n        dialog.close();\n      }\n      dialogPolyfill.formSubmitter = null;\n    }, true);\n  }\n\n  dialogPolyfill['forceRegisterDialog'] = dialogPolyfill.forceRegisterDialog;\n  dialogPolyfill['registerDialog'] = dialogPolyfill.registerDialog;\n\n  if (typeof define === 'function' && 'amd' in define) {\n    // AMD support\n    define(function() { return dialogPolyfill; });\n  } else if (typeof module === 'object' && typeof module['exports'] === 'object') {\n    // CommonJS support\n    module['exports'] = dialogPolyfill;\n  } else {\n    // all others\n    window['dialogPolyfill'] = dialogPolyfill;\n  }\n})();\n"]},"metadata":{},"sourceType":"script"}